<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://FreshStudent.github.io</id>
    <title>To Be Top~</title>
    <updated>2019-07-04T07:33:15.725Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://FreshStudent.github.io"/>
    <link rel="self" href="http://FreshStudent.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://FreshStudent.github.io/images/avatar.png</logo>
    <icon>http://FreshStudent.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, To Be Top~</rights>
    <entry>
        <title type="html"><![CDATA[今日网站推荐_消息来源]]></title>
        <id>http://FreshStudent.github.io/post/jin-ri-wang-zhan-tui-jian-_-xiao-xi-lai-yuan</id>
        <link href="http://FreshStudent.github.io/post/jin-ri-wang-zhan-tui-jian-_-xiao-xi-lai-yuan">
        </link>
        <updated>2019-07-04T07:32:55.000Z</updated>
        <content type="html"><![CDATA[<p>Macstories, theSweetSetup, MACsparky, iDB和MyProductiveMac
<em>【今日网站推荐】：</em> The macOS Automation</p>
<p>• <em>网址：</em> https://www.macosxautomation.com</p>
<p>• <em>网站领域：</em> macOS 自动化。</p>
<p>• <em>网站主笔：</em> Sal Soghoian，自动化专家、作家、音乐家，前苹果自动化技术产品经理，给 macOS 的 Photos、Mail、iWork、Automator 等几乎所有应用带去了自动化功能。</p>
<p>• <em>文章风格：</em> The macOS Automation 涉及了 macOS 自动化的方方面面，从可视化的 Automator 到需要代码基础的 Script Editor。文章所用的工具几乎都是原生的（除了 Omni 系列），非常 hard core，可以帮读者掌握 macOS 系统级的自动化知识。</p>
<p><em>• 文章示例：</em> AppleScript and Keynote https://iworkautomation.com/keynote/index.html 经常用办公软件的用户应该听说过 Office 里的「宏」，其实 iWork 也有自己的自动化功能。这篇关于 Keynote 的文章就讲解了如何通过脚本来快速、批量处理幻灯片中的图片、主题、表格，帮读者减少重复工作的压力。</p>
<p><em>【今日网站推荐】Explained Visually</em></p>
<p>• *网址：*http://setosa.io/ev/</p>
<p>• *网站领域：*各种定理、定律的图解。</p>
<p>• *网站主笔：*Victor Powell，Uber 高级软件工程师，Twitter 帐号 @vicapow。</p>
<p>• *文章风格：*用可视化、可交互的模型，形象地解释数学、经济学和计算机等学科中的经典定理，即使非专业人士也能有一定的收获。</p>
<p><em>文章示例：</em></p>
<p>​		 :one: Markov Chains http://setosa.io/ev/markov-chains/ 马尔可夫链（Markov Chains）描述了一种随机过程，这篇文章中提供了一个可交互的模型，让你像上帝一样设定各个事件发生的概率。最后你还是会发现，已知「现在」的情况下，未来发生的事情并不受到过去影响。比如，Minja 周一到周五节食并不能阻止他周末和朋友出去吃大餐 :full_moon_with_face:</p>
<p>​		 :two: Image Kernels http://setosa.io/ev/image-kernels/ 你可能常常在关于人工智能的文章里看到「卷积神经网络」，这篇文章就图解了其核心技术——图像内核技术（Image Kernels），这种技术可以识别出一张图像的主要部分。</p>
<p><em>【今日网站推荐】The Sweet Setup 的 Newsletter</em></p>
<p>• <em>网址：</em> https://thesweetsetup.com/newsletter/</p>
<p>• <em>内容领域：</em> The Sweet Setup 因为它在苹果效率工具方面的文章而在圈内闻名，但是很多人忽视了它的 Newsletter。The Sweet Setup 的创始人 Shawn Blanc 笔下的文字非常的温润，使人感到非常亲近，这与圈内大多数迫切想在文章中显示自己主张的风格截然不同，读起来非常舒服。</p>
<p>• <em>文章示例：</em> Goals versus systems（Hum 批注版）：这封邮件分析了目标和系统（方法）的关系。有目标的系统，能帮助你作出决定，并且有动力去迈出行动的第一步，当你迈出第一步之后，目标也会随之越来越清晰，帮助你作出更正确的决定，是一个良性循环；而有系统（方法）的目标，则能保证你接近目标的进度，并且习惯和自律还会给你带来愉悦感。 https://d.pr/f/ORkzgx • 现在加入他的 Newsletter 会获得一本他写的 Meaningful Productivity 电子书（PDF 版），写得也不错，很适合普通人，而且文字很平和，易读。</p>
<p>【今日网站推荐】Jarodise 数字游民部落</p>
<p>• 网址：https://jarodise.com • 网站领域：数字游民、远程工作、旅行攻略。</p>
<p>• 网站主笔：Jarod，前非洲石油工程师，现为数字游民生活方式倡导者与践行者。雅思口语 8.5，国内数字游民圈名人。微信、Instagram 和 Twitter 账户都是 jarodise，知乎 ID Jarod Zhang。</p>
<p>• 文章风格：Jarodise 的文章涉及领域很广，从远程工作、旅行攻略到智能硬件、操作系统、甚至个人品牌运营都有涉及，每一篇都是主笔 Jarod 的私人干货。文章主要为原创，但也有高质量的译作。</p>
<p>• 文章示例：</p>
<p>​		 :one: 数字游民(Digital Nomad)访谈 – 一个外企 IT 工程师缘何辞职到藏区卖起了山货？ https://jarodise.com/liujiewen/ 刘杰文，典型中国版数字游民，作家、探险者，现居藏区。文章记录了 Jarodise 对刘杰文的一次访谈，内容包括他入藏的心路历程以及目前的生活状态。像刘这样边远地区创业者的故事，是我们了解中国数字游民的好例子。</p>
<p>​		 :two: 如何成为一名真正的世界公民 – 谈数字游民的长期签证策略 https://jarodise.com/becoming-a-perpetual-traveler-long-term-visa-strategies-for-chinese-citizens/ 文章介绍了很多旅行者、空中飞人都不知道的签证技巧，包括延长签证、学生权益、打工签等内容。即使你并不打算真正去环游世界，这份攻略也能为你的假期旅行签证提供简明的指导。 注：数字游民，指「通过互联网赚取高收入，在低物价水平的地方消费」的人。</p>
<p><em>【今日网站推荐】Carryology</em></p>
<p>• *网址：*http://www.carryology.com/</p>
<p>• *网站领域：*各种包的图文和视频测评、包的使用和养护技巧、包里「装了啥」物品清单分享。</p>
<p>• *文章风格：*文章不仅谈包本身，也提供了背负技巧、背包养护等周边内容。测评文章多全面而客观，除了图片和视频，还会附上一张打分表。关于这份打分表的依据，Carryology 也给出了相信的说明：http://www.carryology.com/how-we-score/</p>
<p>• 文章示例：</p>
<p>​		:one: A Beginner's Guide to Backpack Repair http://www.carryology.com/insights/insights-1/a-beginners-guide-to-backpack-repair/ 修理背包是一门古老的手艺，Carryology 用现代化的方法与工具让这一项工作更加简单。文章介绍了修补、加固和改装背包的一些基础操作，难度较低，所需工具与原料也易于获取，可以帮助有心人把自己的爱包呵护得更周到。</p>
<p>​		:two: Road Tests :: Tom Bihn Synapse 25 http://www.carryology.com/bags/road-tests-tom-bihn-synapse-25/ 小众背包 Tom Bihn 的测评，从材质、做工、分层设计等封面对背包进行了评价。Carryology 测的背包也许不是你的菜，但是它提出的评价标准可以在你自行挑选背包时派上用场。</p>
<p><em>【今日网站推荐】And now it's all this</em></p>
<p>• 网址：http://www.leancrew.com/all-this/</p>
<p>• 博客领域：macOS 和 iOS 自动化、科技评论。</p>
<p>• 博客主笔：Dr.Drang，机械和土木工程师，macOS Power User，自动化高玩，在国外苹果圈名气很大。他的 Twitter 和 GitHub ID 也是 Dr.Drang。</p>
<p>• 文章风格：And now it's all this 的文章排版很简陋，但是充满干货，有大量作者原创的自动化动作和脚本，并且讲解详细。不过文章用词较为晦涩，阅读起来需要一定的英文基础。</p>
<p>• <em>文章示例：</em></p>
<p>​		:one: Importing TextExpander snippets to Keyboard Maestro http://leancrew.com/all-this/2016/04/importing-textexpander-snippets-to-keyboard-maestro/ 介绍：去年 TextExpander 转为订阅制后，Dr.Drang 随即写了这篇从 TextExpander 迁移到 Keyboard Maestro 的详细教程，足以体现他作为一个 Power User 的效率。不过，不久后 Dr.Drang 又用回了 TextExpander，毕竟术业有专攻，工具也是如此。</p>
<p>​		:two: iPad and Mac—the early years http://leancrew.com/all-this/2017/02/ipad-and-mac-the-early-years/ 介绍：除了效率工具，Dr.Drang 也写科技评论，但他并不热衷于追逐热点，这篇文章讨论了 iPad 和 Mac 在生产力上的区别，表现了作者的客观和理性。</p>
<p>【今日网站推荐】iD 公社</p>
<p>网址：http://www.hi-id.com/</p>
<p>网站领域：工业设计、用户界面设计。</p>
<p>网站主笔：Hi-iD，Twitter 和知乎 ID 均为 Hi-iD。前锤子科技设计师，擅长工业设计和用户界面设计。</p>
<p>文章风格：每篇文章几乎都是洋洋洒洒的原创长文，推荐周末挑个时间坐下来慢慢读。</p>
<p>文章示例：</p>
<p>Apple &quot;无缝&quot;涉及之历程 http://www.hi-id.com/?p=3286 光滑圆润的 Apple Pencil、表面无接缝的 MacBook 充电器……文章从材料、工艺到用户体验，分析了苹果在「无缝」设计上的历程。</p>
<p>Apple 那些&quot;无关紧要&quot;的设计改进 http://www.hi-id.com/?p=4239k Safari 图标中指针角度的调整、iPhone 保护套按钮材质的改变……文章从这些看似无关紧要的设计，带你看苹果对设计品质的追求。</p>
<p><em>【今日网站推荐】</em> 这个控件叫什么 - 知乎专栏</p>
<p>• <em>网址：</em> https://zhuanlan.zhihu.com/c_87416856</p>
<p>• <em>专栏领域：</em> 界面设计、交互设计</p>
<p>• <em>专栏主笔：</em> 龙爪槐守望者，交互设计师、猎豹移动产品运营，知乎 ID @龙爪槐守望者。</p>
<p>• <em>文章风格：</em> 轻松的短小的科普文章，从我们都在用 App 入手，介绍一些控件的专业名称，还会挖一挖控件发展的历史，时不时还能看到一些「开脑洞」的控件设计。有趣的是，部分控件实在没有标准的名字，所以你可看到「这个控件可能叫……」这样的标题。</p>
<p><em>文章示例：</em></p>
<p>这个控件叫：Badge/徽标/小红点 https://zhuanlan.zhihu.com/p/26107887 iPhone 桌面图标右上角的提醒、微信朋友圈图标上的提示……这些让人目不转睛可能还会引发焦虑的红色圆形物体到底是什么？其实它们就是 Badge（徽标），一种表示有新内容或待处理事项的提醒形式。文章最后还介绍了 QQ 聊天中可以随手「拔掉」的「小红点」，看着就很痛快。</p>
<p><em>【今日网站推荐】</em> Chronodex</p>
<p>• <em>网址：</em> http://scription.typepad.com/blog/#.WwvwpS-B234</p>
<p>• <em>网站领域：</em> 手帐、文具。 • <em>网站主笔：</em> Patrick Ng，香港文具爱好者，手帐高手。</p>
<p>• <em>文章风格：</em> 文章介绍了大量的文具和使用技巧，并提供了免费的手帐模板下载。文具总体比较偏日系，装饰性较强。</p>
<p><em>文章示例：</em> Scription: Scription Chronodex Weekly Planner Jan-Jun 2018 Released http://scription.typepad.com/blog/2017/12/scription-chronodex-weekly-planner-jan-jun-2018-released.html#.WwwZ0S-B234 文章介绍了一种适用于纸笔的周计划模板，可以给喜欢做纸笔记录的读者一些参考。不得不说，即使只看 Chronodex 的手绘示意图也很有意思。</p>
<p><em>【今日网站推荐】</em> TED Ed （TED Education，TED 教育）Youtube 频道</p>
<p>• <em>网址：</em> https://m.youtube.com/user/TEDEducation/videos</p>
<p>• <em>内容领域：</em> TED Ed 是 TED（Technology, Entertainment, Design，技术、娱乐、 设计） 出品的科普项目，涵盖各个知识领域，每个都是 4、5 分钟左右的短视频。带有字幕。</p>
<p>• <em>订阅方式：</em> 把上方 TED Ed 的网址粘贴到 Inoreader，就可以通过 RSS 对其进行订阅。</p>
<p>• <em>视频推荐：</em> Barin Discoveries https://www.youtube.com/watch?v=WuyPuH9ojCE&amp;list=PLJicmE8fK0EgM1HDy0KsAunxlVxt1ALCS 这是 TED Ed 中关于大脑的一系列视频，包括学习多语言对大脑有什么益处、糖类如何影响大脑、压力如何影响大脑等。</p>
<p><em>【今日网站推荐】</em> App Talk 还在四处搜罗 x-callback-ur 的你，不应该错过 App Talk。</p>
<p>• <em>网址：</em> https://app-talk.com/</p>
<p>• <em>网站领域：</em> iOS 自动化，x-callback-url</p>
<p>• <em>网站特点：</em> 网站目前收录了 Bear、Drafts、Workflow 等知名效率工具的 x-callback-url（比较难得的是，VLC 播放器、iCab 浏览器等相对少见的 App 也位列其中），不同于这些应用官方的「支持文档」，App Talk 精选了各工具最实用的 x-callback-url，有用法说明，并用带颜色来表示你应该填写的部分，非常好懂。所有的 x-callback-url 都提供一键拷贝的按钮，便于你复制使用。 例如下图所示运行 Workflow的 x-callback-url，可以直接把文本传递给 Workflow。编辑部有一个自动生成文章微博简介的 Workflow，配合抓取最新文章的 IFTTT、再通个这个 x-callback-url ，就能大大减轻发微博的工作量。（视频效果可见文章 https://sspai.com/post/43439）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[购买搬瓦工vps]]></title>
        <id>http://FreshStudent.github.io/post/gou-mai-ban-wa-gong-vps</id>
        <link href="http://FreshStudent.github.io/post/gou-mai-ban-wa-gong-vps">
        </link>
        <updated>2019-06-17T02:53:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="购买搬瓦工vps">购买搬瓦工vps</h1>
<h2 id="1-官网">1 官网：</h2>
<p><a href="https://bwh1.net/">板瓦工</a></p>
<h2 id="2-安装系统">2 安装系统</h2>
<blockquote>
<p>Centos 6 x86_64 bbr</p>
</blockquote>
<h2 id="3-安装ss-sr">3 安装ss、sr</h2>
<blockquote>
<p>目前ss、sr的路径已经被隐藏了，所以需要登录官网直接点击连接跳转。
跳转以后可以实现<strong>一键安装</strong>。</p>
</blockquote>
<p>ss的url：<a href="https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocks">搬瓦工Shadowsocks路径</a></p>
<p>sr的url：<a href="https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocksr">搬瓦工ShadowsocksR路径</a></p>
<h2 id="4-手机-pc安装客户端ss">4 手机、PC安装客户端ss</h2>
<h3 id="41-只有安装了ss的客户端才可以实现科学上网">4.1 只有安装了ss的客户端才可以实现科学上网</h3>
<h4 id="411-mac-本地安装了一个ss的dmg版本">4.1.1 mac 本地安装了一个ss的dmg版本</h4>
<h3 id="42-相关的github地址shadowsocks">4.2 相关的github地址：<a href="https://github.com/shadowsocks">shadowsocks</a></h3>
<h4 id="421-可以开启pac模式就可以智能的动态上网了">4.2.1 可以开启PAC模式，就可以智能的动态上网了。</h4>
<h2 id="5-谷歌浏览器安装-switchyomega">5 谷歌浏览器安装 SwitchyOmega</h2>
<h3 id="51-下载插件的位置switchyomega">5.1 下载插件的位置：<a href="https://www.switchyomega.com/">SwitchyOmega</a></h3>
<h3 id="52-下载插件后默认配置即可只要选择跟随系统即可">5.2 下载插件后，默认配置即可，只要选择跟随系统即可。</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>http://FreshStudent.github.io/post/hello-gridea</id>
        <link href="http://FreshStudent.github.io/post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[BulletsNote]]></title>
        <id>http://FreshStudent.github.io/post/BulletsNote</id>
        <link href="http://FreshStudent.github.io/post/BulletsNote">
        </link>
        <updated>2018-08-23T09:19:18.000Z</updated>
        <content type="html"><![CDATA[<h1 id="子弹笔记使用教程">子弹笔记使用教程</h1>
<h3 id="概述步骤">概述步骤：</h3>
<ol>
<li>将所有任务列出来（包括临时插入的）。</li>
<li>根据任务情况，填写对应的符号。</li>
<li>一段时间后，更新相应的任务状态。</li>
</ol>
<h3 id="任务场景">任务场景：</h3>
<blockquote>
<p>早上上班的时候，W总说需要写一份gitflow的工作流程，用于代码的自动化构建。网上买的新的机械键盘今天到了，很高兴。打开Idea继续开发之前安排的用户管理功能。项目经理说，有一个JSP页面需要优先开发，要安排时间做。<br>
中午的时候，总公司发邮件需要开发人员参加下个月12号的技能培训。<br>
下午的时候，好兄弟告诉我，他准备求婚了，是一件高兴的事情。
15点开会《代码审查技巧》小憩的时候，回忆起今天上班的时候刷手机的时候，看到了一个java的新技术Spring，想研究一下。<br>
下班后，和同事聊天的时候，他说了一句：“机会都是留给有准备的人的”，觉得这句话说得很对，触发我的思考了。 手机没话费了，马上用WX充了100块。</p>
</blockquote>
<p>总结一下，以上一天内发生了什么事情：</p>
<ul>
<li>w总安排我写一个Gitflow的工作流程</li>
<li>新买的机械键盘到了</li>
<li>继续开发用户管理的功能</li>
<li>JSP需求需要优先开发</li>
<li>下个月12号参加公司的培训</li>
<li>好兄弟准备求婚了</li>
<li>《代码审查技巧》心得、会议记录</li>
<li>JAVA的新技术Spring想研究</li>
<li>机会是留给有准备的人的。</li>
<li>手机充话费</li>
</ul>
<h4 id="对以上事情做一个归类">对以上事情做一个归类：</h4>
<h5 id="不能马上完成的需要持续一段过程的">不能马上完成的，需要持续一段过程的：</h5>
<ul>
<li>w总安排我写一个Gitflow的工作流程</li>
<li>继续开发用户管理的功能</li>
<li>JSP需求需要优先开发</li>
<li>《代码审查技巧》心得、会议记录</li>
</ul>
<h5 id="将来要做的事情">将来要做的事情</h5>
<ul>
<li>下个月参加公司的培训</li>
<li>JAVA的新技术Spring想研究</li>
</ul>
<h5 id="马上就做好的">马上就做好的</h5>
<ul>
<li>手机充话费</li>
</ul>
<h5 id="促进自己思考的事情-句子或者别的">促进自己思考的事情、句子或者别的</h5>
<ul>
<li>机会是留给有准备的人的。</li>
</ul>
<h5 id="发生的一些事件">发生的一些事件</h5>
<ul>
<li>新买的键盘到了</li>
<li>好兄弟准备求婚了</li>
</ul>
<hr>
<p>引入子弹笔记管理：
步骤：<br>
一、先将要做的任务全部列出来</p>
<ul>
<li>w总安排我写一个Gitflow的工作流程</li>
<li>新买的机械键盘到了</li>
<li>继续开发用户管理的功能</li>
<li>JSP需求需要优先开发</li>
<li>下个月12号参加公司的培训</li>
<li>好兄弟准备求婚了</li>
<li>《代码审查技巧》心得、会议记录</li>
<li>JAVA的新技术Spring想研究</li>
<li>机会是留给有准备的人的。</li>
<li>手机充话费</li>
</ul>
<p>引入子弹笔记符号管理：</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th style="text-align:left">内容</th>
<th style="text-align:left">备注</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">•</td>
<td style="text-align:left">任务初始状态</td>
<td style="text-align:left">最初记录任务的初始符号</td>
</tr>
<tr>
<td style="text-align:center">X</td>
<td style="text-align:left">完成的任务，需要标记为X</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:left">任务迁移（任务持续）</td>
<td style="text-align:left">不能马上完成的项目，持续一段时间的</td>
</tr>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:left">任务预约（任务将来完成）</td>
<td style="text-align:left">较大任务，需要用项目分解才可做</td>
</tr>
<tr>
<td style="text-align:center">O</td>
<td style="text-align:left">事件是和日期相关的项目，无论是预约性质的（如“查理的生日”），又或者需要被完成的（如“签定租约”）。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">-</td>
<td style="text-align:left">事实、想法、思考和观察</td>
<td style="text-align:left">笔记是那些关于你想要记忆，但是不必马上完成的内容。这种子弹适合用于会议、演讲或课堂的笔记。</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:left">任务优先级别，标记在子弹的左边。这样你可以快速扫描到页面中最重要的项目。</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">!</td>
<td style="text-align:left">用感叹号来表示，通常可以使用在笔记的部分。关于那些伟大的想法，个人咒语和灵光一现的天才见解！</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td style="text-align:left">用眼睛符号来表示。表示这个部分的内容需要进一步的研究、资讯和发现。</td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<p>根据子弹符号，以上一天的经历就变成：</p>
<p>2018-08-22</p>
<p><strong>&lt;-</strong>   W总安排我写一个Gitflow的工作流程（将来完成&lt;并且需要文档输出-的任务）<br>
<strong>O</strong>  新买的机械键盘到了（发生的一些高兴的事件O）<br>
<strong>&gt;</strong> *   继续开发用户管理的功能（持续的任务&gt;，优先级为*）<br>
<strong>&gt;</strong> **    JSP需求需要优先开发（持续的任务 &gt;，优先级为**）<br>
<strong>&lt;O</strong>  下个月12号参加公司的培训（将来完成&lt;,的事件O，需要添加到手机日历中，提醒自己的，可以用siri）<br>
<strong>O</strong>  好兄弟准备求婚了（发生高兴的事件O）<br>
<strong>&lt;-</strong> 《代码审查技巧》心得、会议记录（将来&lt;需要整理文档-的任务）<br>
<strong>&lt;@</strong>  JAVA的新技术Spring想研究（将来&lt;需要研究的）<br>
<strong>!</strong>  机会是留给有准备的人的（促进自己思考的！）<br>
<strong>X</strong>  手机充话费（马上就可以完成的子任务X）</p>
<hr>
<p>2018-08-23</p>
<p><strong>&gt;</strong>  继续开发用户管理的功能（只有一个任务，没有优先级）<br>
X   JSP需求需要优先开发（任务完成X）</p>
<p><strong>&lt;-</strong>   W总安排我写一个Gitflow的工作流程（将来完成&lt;并且需要文档输出-的任务）<br>
<strong>&lt;-</strong> 《代码审查技巧》心得、会议记录（将来&lt;需要整理文档-的任务）<br>
<strong>&lt;-</strong>  JAVA的新技术Spring想研究（将来&lt;需要整理文档-的任务）</p>
<hr>
<p>每天我就只需要建立我的子弹笔记，以一个月为单位，每天就根据任务的优先级来安排工作，有新工作来的也没关系，下班前修改一下当前的任务状态即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jenkins启动tomcat与SSH启动区别]]></title>
        <id>http://FreshStudent.github.io/post/JenkinsAndSSHStartTomcat</id>
        <link href="http://FreshStudent.github.io/post/JenkinsAndSSHStartTomcat">
        </link>
        <updated>2018-08-21T06:20:09.000Z</updated>
        <content type="html"><![CDATA[<p>自动构建的Jenkins利用push over ssh 插件，将生成好的war包，远程发布到服务器中，并且利用bin/startup.sh启动Tomcat，发现Tomcat启动了(6-7s),正常加载项目后是需要10s左右的启动时间，但是项目却没有成功。</p>
<h4 id="启动失败时候的tomcat信息">启动失败时候的Tomcat信息：</h4>
<pre><code class="language-java">
[samp@tset-flow2 ~]$ ps -ef|grep 19011
samp     22930     1  7 09:53 ?        00:00:14 /usr/bin/java -Djava.util.logging.config.file=/u01/samp/soft/apache/tomcats/tomcat-balance-19011/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms512m -Xmx2048m -Djava.endorsed.dirs=/u01/samp/soft/apache/tomcats/tomcat-balance-19011/endorsed -classpath /u01/samp/soft/apache/tomcats/tomcat-balance-19011/bin/bootstrap.jar:/u01/samp/soft/apache/tomcats/tomcat-balance-19011/bin/tomcat-juli.jar -Dcatalina.base=/u01/samp/soft/apache/tomcats/tomcat-balance-19011 -Dcatalina.home=/u01/samp/soft/apache/tomcats/tomcat-balance-19011 -Djava.io.tmpdir=/u01/samp/soft/apache/tomcats/tomcat-balance-19011/temp org.apache.catalina.startup.Bootstrap start
samp     23041 16786  0 09:56 pts/0    00:00:00 grep 19011
</code></pre>
<blockquote>
<p>做了以下验证步骤：</p>
</blockquote>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-848743"> ssh进入tomcat的bin目录下手动重启Tomcat --&gt; 原来项目A（jdk1.8）可以正常启动。  【<strong>排除shell脚本问题</strong><label class="task-list-item-label" for="task-item-848743"> ssh进入tomcat的bin目录下手动重启Tomcat --> 原来项目A（jdk1.8）可以正常启动。  【**排除shell脚本问题**】</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox" id="task-item-2357257"> 替换B项目（jdk1.7）到webapps目录下，Jenkins启动 --&gt; 项目可以正常启动。   【<strong>排除tomcat配置问题</strong><label class="task-list-item-label" for="task-item-2357257"> 替换B项目（jdk1.7）到webapps目录下，Jenkins启动 --> 项目可以正常启动。   【**排除tomcat配置问题**】</label></li>
</ul>
<h4 id="排除了shell脚本-tomcat配置问题那估计就是环境问题了">排除了shell脚本、tomcat配置问题，那估计就是环境问题了？</h4>
<blockquote>
<p>Tomcat没有报错，但是项目却启动不起来，于是根据启动的信息，检查一下jdk版本</p>
</blockquote>
<pre><code>[samp@tset-flow2 ~]$ /usr/bin/java -version
java version &quot;1.7.0_45&quot;
OpenJDK Runtime Environment (rhel-2.4.3.3.el6-x86_64 u45-b15)
OpenJDK 64-Bit Server VM (build 24.45-b08, mixed mode)

</code></pre>
<blockquote>
<p>发现失败时候，tomcat加载的jdk是1.7版本的。</p>
</blockquote>
<h4 id="手动启动成功的tomcat信息">手动启动成功的tomcat信息</h4>
<pre><code>[samp@tset-flow2 bin]$ ps -ef|grep 19011
samp     23083     1 43 09:57 pts/0    00:00:43 /opt/java/bin/java -Djava.util.logging.config.file=/u01/samp/soft/apache/tomcats/tomcat-balance-19011/conf/logging.properties -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Xms512m -Xmx2048m -Djava.endorsed.dirs=/u01/samp/soft/apache/tomcats/tomcat-balance-19011/endorsed -classpath /u01/samp/soft/apache/tomcats/tomcat-balance-19011/bin/bootstrap.jar:/u01/samp/soft/apache/tomcats/tomcat-balance-19011/bin/tomcat-juli.jar -Dcatalina.base=/u01/samp/soft/apache/tomcats/tomcat-balance-19011 -Dcatalina.home=/u01/samp/soft/apache/tomcats/tomcat-balance-19011 -Djava.io.tmpdir=/u01/samp/soft/apache/tomcats/tomcat-balance-19011/temp org.apache.catalina.startup.Bootstrap start
</code></pre>
<blockquote>
<p>Tomcat+项目成功启动。根据启动的信息，检查一下jdk版本</p>
</blockquote>
<pre><code>[samp@tset-flow2 bin]$ /opt/java/bin/java -version
java version &quot;1.8.0_45&quot;
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)
</code></pre>
<h4 id="上下文对比发现jenkins启动的tomcat-和-ssh启动的tomcat加载的jdk不一样">上下文对比，发现Jenkins启动的tomcat 和 ssh启动的tomcat加载的jdk不一样。</h4>
<table>
<thead>
<tr>
<th>启动方式</th>
<th>加载jdk</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr>
<td>Jenkins</td>
<td>java version &quot;1.7.0_45&quot;</td>
<td>/usr/bin/java -version</td>
</tr>
<tr>
<td>ssh</td>
<td>java version &quot;1.8.0_45&quot;</td>
<td>/opt/java/bin/java -version</td>
</tr>
</tbody>
</table>
<h3 id="难道jenkins启动和tomcat启动加载的jdk环境变量不一致">难道Jenkins启动和tomcat启动加载的jdk环境变量不一致？</h3>
<p>是的！</p>
<p><a href="https://blog.csdn.net/leshami/article/details/77198412">Linux 登陆shell，交互shell以及环境变量读取顺序</a></p>
<hr>
<h3 id="验证一下想法">验证一下想法：</h3>
<blockquote>
<p>直接指定Tomcat启动jdk版本，因为原项目A（jdk1.8）是需要启动jdk1.8的，而Jenkins是启动的jdk是默认的1.7。</p>
</blockquote>
<p><a href="https://www.cnblogs.com/xu-dong/p/6429301.html">Linux jdk安装多个版本并进行切换</a></p>
<h4 id="目前使用的是17的jdk估计jenkins读取的是这里的配置">目前使用的是1.7的jdk，估计Jenkins读取的是这里的配置：</h4>
<pre><code>[samp@tset-flow2 bin]$ alternatives --config java

There are 3 programs which provide 'java'.

  Selection    Command
-----------------------------------------------
*+ 1           /usr/lib/jvm/jre-1.7.0-openjdk.x86_64/bin/java
   2           /usr/lib/jvm/jre-1.6.0-openjdk.x86_64/bin/java
   3           /usr/lib/jvm/jre-1.5.0-gcj/bin/java

</code></pre>
<h4 id="而ssh读取的是全局变量的">而ssh读取的是全局变量的</h4>
<pre><code>vi  /etc/profile 
</code></pre>
<h5 id="注意此文件配置的java_home-path">注意此文件配置的JAVA_HOME、PATH</h5>
<pre><code>export JAVA_HOME=/opt/java
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
</code></pre>
<h2 id="解决方案">解决方案</h2>
<blockquote>
<p>既然此Tomcat运行的项目A是依赖于JDK1.8的，那么配置tomcat的启动依赖的jdk即可</p>
</blockquote>
<pre><code>vi /u01/samp/soft/apache/tomcats/tomcat-xxxxx-19011/bin/catalina.sh
</code></pre>
<h5 id="catalinash-文件修改位置制定jdk18的路径">catalina.sh 文件修改位置，制定jdk1.8的路径：</h5>
<blockquote>
<p>添加export JAVA_HOME=/opt/java、export JRE_HOME=/opt/java</p>
</blockquote>
<pre><code class="language-java">export JAVA_HOME=/opt/java
export JRE_HOME=/opt/java
JAVA_OPTS=&quot;-Xms512m -Xmx2048m&quot;
.....略.....
</code></pre>
<p>{% asset_img java_home.png JAVA_HOME位置 %}
至此完毕！</p>
<hr>
<p>参考链接：</p>
<p><a href="https://www.cnblogs.com/xu-dong/p/6429301.html">Linux jdk安装多个版本并进行切换</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[购买搬瓦工vps]]></title>
        <id>http://FreshStudent.github.io/post/购买搬瓦工vps</id>
        <link href="http://FreshStudent.github.io/post/购买搬瓦工vps">
        </link>
        <updated>2018-06-01T09:26:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="购买搬瓦工vps">购买搬瓦工vps</h1>
<h2 id="1-官网">1 官网：</h2>
<p><a href="https://bwh1.net/">板瓦工</a></p>
<h2 id="2-安装系统">2 安装系统</h2>
<blockquote>
<p>Centos 6 x86_64 bbr</p>
</blockquote>
<h2 id="3-安装ss-sr">3 安装ss、sr</h2>
<blockquote>
<p>目前ss、sr的路径已经被隐藏了，所以需要登录官网直接点击连接跳转。
跳转以后可以实现<strong>一键安装</strong>。</p>
</blockquote>
<p>ss的url：<a href="https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocks">搬瓦工Shadowsocks路径</a></p>
<p>sr的url：<a href="https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocksr">搬瓦工ShadowsocksR路径</a></p>
<h2 id="4-手机-pc安装客户端ss">4 手机、PC安装客户端ss</h2>
<h3 id="41-只有安装了ss的客户端才可以实现科学上网">4.1 只有安装了ss的客户端才可以实现科学上网</h3>
<h4 id="411-mac-本地安装了一个ss的dmg版本">4.1.1 mac 本地安装了一个ss的dmg版本</h4>
<h3 id="42-相关的github地址shadowsocks">4.2 相关的github地址：<a href="https://github.com/shadowsocks">shadowsocks</a></h3>
<h4 id="421-可以开启pac模式就可以智能的动态上网了">4.2.1 可以开启PAC模式，就可以智能的动态上网了。</h4>
<h2 id="5-谷歌浏览器安装-switchyomega">5 谷歌浏览器安装 SwitchyOmega</h2>
<h3 id="51-下载插件的位置switchyomega">5.1 下载插件的位置：<a href="https://www.switchyomega.com/">SwitchyOmega</a></h3>
<h3 id="52-下载插件后默认配置即可只要选择跟随系统即可">5.2 下载插件后，默认配置即可，只要选择跟随系统即可。</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[jenkins+gitLib+maven+SSh+war 自动化远程构建war包]]></title>
        <id>http://FreshStudent.github.io/post/jenkins-gitLib-maven-SSh-war</id>
        <link href="http://FreshStudent.github.io/post/jenkins-gitLib-maven-SSh-war">
        </link>
        <updated>2018-05-15T02:40:09.000Z</updated>
        <summary type="html"><![CDATA[<p>公司一直都是手动发布war包的，这里有一个问题，人为的操作是很容易出现问题的，于是想到用jenkins来进行发布war包，减少人工参与</p>
]]></summary>
        <content type="html"><![CDATA[<p>公司一直都是手动发布war包的，这里有一个问题，人为的操作是很容易出现问题的，于是想到用jenkins来进行发布war包，减少人工参与</p>
<!--more-->
<h2 id="一-安装jenkins常规操作过程不表">一、安装jenkins（常规操作过程不表）</h2>
<p>启动jenkins，修改默认端口号（8080）启动</p>
<ol>
<li>
<p>打开终端，cd 到Jenkins的安装目录（即jenkins.war所在目录），如：D:\Program Files (x86)\Jenkins</p>
</li>
<li>
<p>执行命令：
<code>java -jar jenkins.war --ajp13Port=-1 --httpPort=9999</code></p>
</li>
</ol>
<h2 id="二-需要安装jenkins插件">二、需要安装jenkins插件：</h2>
<h3 id="1-集成gitlab插件">1、集成GitLab插件</h3>
<p><strong>GitLab Plugin</strong><br>
This plugin integrates GitLab to Jenkins by faking a GitLab CI Server.</p>
<p>用于：
需要配置gitlib中的private Key等相关配置。</p>
<h3 id="2-构建maven项目需要用到的插件">2、构建Maven项目需要用到的插件</h3>
<p><strong>Maven Integration plugin</strong><br>
This plug-in provides, for better and for worse, a deep integration of Jenkins and Maven: Automatic triggers between projects depending on SNAPSHOTs, automated configuration of various Jenkins publishers (Junit, ...).</p>
<p>用于：
指向本地的相关maven所在，用于打包命令。</p>
<h3 id="3-发布远程war包的将war包发送到远程tomcat中">3、发布远程war包的，将war包发送到远程Tomcat中</h3>
<blockquote>
<p>【注意！！！！！！！！】这种方法已经弃用，因为tomcat的自动发布功能经常出现故障，导致发布失败。</p>
</blockquote>
<p><s><strong>Deploy to container Plugin</strong></s>
<s>This plugin allows you to deploy a war to a container after a successful build.
Glassfish 3.x remote deployment</s></p>
<p><s>目的：</s>
<s>指定jenkins服务器中的war包路径，通过配置tomcat目录下的tomcat-users.xml文件可以实现远程发布war包到指定路径。但是这里有一个问题，需要启动远程tomcat才可以成功提交，觉得这种方式不是很靠谱，想换一种基于shell命令的方式进行的项目部署。</s></p>
<h3 id="4-将本地war包上传到远端服务器然后执行shell脚本">4、将本地war包上传到远端服务器，然后执行shell脚本</h3>
<p><strong>Publish over SSH</strong></p>
<h3 id="5-远程运行shell脚本">5、远程运行shell脚本</h3>
<p>SSH
配置在远程tomcat中可以执行的shell脚本命令</p>
<h2 id="三-相关步骤">三、相关步骤</h2>
<h3 id="31-jenkins启动">3.1 jenkins启动</h3>
<ol>
<li>
<p>启动jenkins
由于我是使用homebrew来安装jenkins的，需要在终端中输入代码：</p>
<p><code>shell brew info jenkins</code></p>
</li>
<li>
<p>打开终端，cd 到Jenkins的安装目录（即jenkins.war所在目录）</p>
<p><code>cd /usr/local/Cellar/jenkins/2.102/libexec</code></p>
</li>
<li>
<p>启动jenkins，修改默认端口号（8080）启动，执行命令：</p>
<p><code>java -jar jenkins.war --ajp13Port=-1 --httpPort=9999</code></p>
</li>
<li>
<p>输入url，访问jenkins：</p>
<p><code>http://localhost:9999</code></p>
</li>
</ol>
<h3 id="32-jenkins-配置">3.2 jenkins 配置</h3>
<h4 id="321-系统管理">3.2.1 系统管理</h4>
<ol>
<li>系统设置：全局设置&amp;路径。</li>
</ol>
<ul>
<li>
<p>SSH remote hosts<br>
配置远端SSH连接相关参数
填写相关参数后，需要点击“check connection”按钮检查是否能成功连通。
<img src="http://FreshStudent.github.io/post-images/SSHremotehostsSetting.png" alt="配置远端SSH连接相关参数"></p>
</li>
<li>
<p>Gitlab<br>
Gitlib相关参数配置
这一步需要填写gitLib中的相关参数，复制过来。
<img src="http://FreshStudent.github.io/post-images/GitlabSetting.png" alt="配置gitLib中的相关参数"></p>
</li>
<li>
<p>Publish over SSH<br>
利用SSH，将文件复制到远程服务器特定文件夹中，并且可以执行自定义shell脚本。
<img src="http://FreshStudent.github.io/post-images/publishOverSSHSetting.png" alt="利用SSH，将文件复制到远程服务器特定文件夹中，并且可以执行自定义shell脚本"></p>
</li>
</ul>
<ol start="2">
<li>全局工具配置： 工具配置，包括他们的位置和自动安装器。</li>
</ol>
<ul>
<li>Maven<br>
配置打包gitlib代码的相关命令。<br>
<img src="http://FreshStudent.github.io/post-images/MavenSetting.png" alt="配置打包gitlib代码的相关命令"></li>
</ul>
<ol start="3">
<li>管理插件：添加、删除、禁用或启用Jenkins功能扩展插件。
使用的插件：</li>
</ol>
<ul>
<li>
<p>Git Parameter Plug-In<br>
Adds ability to choose from git repository revisions or tags。</p>
</li>
<li>
<p>GitLab Plugin<br>
This plugin integrates GitLab to Jenkins by faking a GitLab CI Server.</p>
</li>
<li>
<p>Publish Over SSH<br>
Send build artifacts over SSH</p>
</li>
<li>
<p>Maven Integration plugin<br>
This plug-in provides, for better and for worse, a deep integration of Jenkins and Maven: Automatic triggers between projects depending on SNAPSHOTs, automated configuration of various Jenkins publishers (Junit, ...).</p>
</li>
<li>
<p>SSH plugin<br>
This plugin executes shell commands remotely using SSH protocol.</p>
</li>
</ul>
<h4 id="322-项目配置">3.2.2 项目配置</h4>
<p><img src="http://FreshStudent.github.io/post-images/projectSetting.png" alt=""></p>
<ul>
<li>
<p>General<br>
<img src="http://FreshStudent.github.io/post-images/projectGeneral.png" alt=""></p>
</li>
<li>
<p>源码管理<br>
<img src="http://FreshStudent.github.io/post-images/codeManager.png" alt=""></p>
</li>
<li>
<p>构建触发器<br>
<img src="http://FreshStudent.github.io/post-images/buildTiggerSetting.png" alt=""></p>
</li>
<li>
<p>构建环境<br>
<img src="http://FreshStudent.github.io/post-images/buildEvmSetting.png" alt=""></p>
</li>
<li>
<p>Pre Steps<br>
<img src="http://FreshStudent.github.io/post-images/preStepsAndBuild.png" alt=""></p>
</li>
<li>
<p>Build<br>
<img src="http://FreshStudent.github.io/post-images/buildSetting.png" alt=""></p>
</li>
<li>
<p>Post Steps<br>
<img src="http://FreshStudent.github.io/post-images/PostStepsSetting.png" alt=""></p>
</li>
</ul>
<p>注意事项：<br>
<img src="http://FreshStudent.github.io/post-images/PostStepsSetting1.png" alt=""></p>
<ul>
<li>构建设置<br>
保持默认即可</li>
</ul>
<h3 id="33-shell脚本">3.3 shell脚本</h3>
<p>shell脚本步骤：</p>
<ol>
<li>备份原来war包解压的folder。</li>
<li>关闭运行中的tomcat。</li>
<li>复制上传后的war到webapps目录。</li>
<li>启动tomcat。</li>
<li>删除上传到临时文件夹中的war包。</li>
</ol>
<pre><code>#!/bin/bash
#defined

#TOMCAT_INFO
TOMCAT_HOME=&quot;/u03/samp/soft/apache/tomcats/tomcat-flow-19008&quot; 
TOMCAT_PORT=&quot;19008&quot;
TOMCAT_NAME=&quot;tomcat-flow-19008&quot;
TOMCAT_WEBAPPS_NAME=&quot;webapps&quot;
TOMCAT_SHUTDOWN=$TOMCAT_HOME/bin/shutdown.sh  
TOMCA_START=$TOMCAT_HOME/bin/startup.sh

PROJECT_NAME=&quot;fzsFlow&quot;

##临时上传的war包名称
TEMP_UPLOAD_WAR_NAME=&quot;tempUploadWar&quot;

## 时间戳 eg：20180510142558
DATE_TIME=$(date +%Y%m%d%H%M%S)

## 备份文件夹名称，备份服务器中正在运行的folder
BACKUP_RUNNING_WAR_FOLDER_NAME=&quot;backupRunningWar&quot;


#创建备份文件夹
function createBackFolder(){
	## 创建备份文件夹（若没有则创建） begin
	echo ---------------------------备份文件夹$TEMP_UPLOAD_WAR_NAME，备份临时上传的war（若没有则创建） beginning
	if [ -d &quot;$TOMCAT_HOME/$TEMP_UPLOAD_WAR_NAME&quot; ] ; then  
	echo &quot;文件夹存在！&quot;  
	else  
	echo &quot;文件夹不存在,创建文件夹：$TEMP_UPLOAD_WAR_NAME&quot;  
	cd $TOMCAT_HOME
	mkdir $TEMP_UPLOAD_WAR_NAME
	fi  
	echo ---------------------------备份文件夹$TEMP_UPLOAD_WAR_NAME，备份临时上传的war（若没有则创建） end

	echo ---------------------------备份文件夹$BACKUP_RUNNING_WAR_FOLDER_NAME，备份服务器中正在运行的folder（若没有则创建） beginning
	if [ -d &quot;$TOMCAT_HOME/$BACKUP_RUNNING_WAR_FOLDER_NAME&quot; ] ; then  
	echo &quot;文件夹存在！&quot;  
	else  
	echo &quot;文件夹不存在,创建文件夹：$BACKUP_RUNNING_WAR_FOLDER_NAME&quot;  
	cd $TOMCAT_HOME
	mkdir $BACKUP_RUNNING_WAR_FOLDER_NAME
	fi  
	echo ---------------------------备份文件夹$BACKUP_RUNNING_WAR_FOLDER_NAME，备份服务器中正在运行的folder（若没有则创建） end
	# 创建备份文件夹 end
}

#备份运行中的代码
function backUpRunningCode(){
	echo ---------------------------备份服务器原来文件夹 beginning
	## 先备份原war解压后的folder
	cd $TOMCAT_HOME/$TOMCAT_WEBAPPS_NAME
	zip -r $TOMCAT_HOME/$BACKUP_RUNNING_WAR_FOLDER_NAME/&quot;$PROJECT_NAME$DATE_TIME.zip&quot; $PROJECT_NAME
	echo 查看备份目录下的zip文件：
	ls -lt $TOMCAT_HOME/$BACKUP_RUNNING_WAR_FOLDER_NAME 
	echo ---------------------------备份服务器原来文件夹 end
}


#删除运行中的Tomcat
function killRunningTomcat(){
	## Kill 所有运行中的Tomcat begin
	echo ---------------------------找出所有的Tomcat pid 并kill掉  beginning
	TOMCAT_PID=$(ps -ef|grep $TOMCAT_NAME|grep start|grep -v 'grep'|grep -v 'jenkins_restart.sh'|grep -v 'zip -r'|awk '{print $2}')
	#遍历是否存在其他tomcat，如果有的话，kill掉
	while [ -n &quot;$TOMCAT_PID&quot; ]    
		do 
			echo &quot;scan tomcat pid :&quot; $TOMCAT_PID
		    $TOMCAT_SHUTDOWN
		    sleep 3s
		    kill -9 $TOMCAT_PID
			sleep 3s
			TOMCAT_PID=$(ps -ef|grep $TOMCAT_NAME|grep start|grep -v 'grep'|grep -v 'jenkins_restart.sh'|grep -v 'zip -r'|awk '{print $2}')  ##再查找一次tomcat的pid
	done
	echo ---------------------------找出所有的Tomcat pid 并kill掉  end
	## Kill 所有运行中的Tomcat end
}

## 删除webapps下的war包和war包解压后的文件夹
function removeOldWarFolder(){
	echo ---------------------------删除webapps下的war包和war包解压后的文件夹  beginning
	rm -rf $TOMCAT_HOME/$TOMCAT_WEBAPPS_NAME/$PROJECT_NAME.war
	rm -rf $TOMCAT_HOME/$TOMCAT_WEBAPPS_NAME/$PROJECT_NAME
	echo ---------------------------删除webapps下的war包和war包解压后的文件夹  end
}

## 复制war包到webapps目录
function copyUploadWar2Webapps(){
	echo ---------------------------复制war包到webapps目录 beginning
	cp $TOMCAT_HOME/$TEMP_UPLOAD_WAR_NAME/$PROJECT_NAME.war $TOMCAT_HOME/$TOMCAT_WEBAPPS_NAME
	echo ---------------------------复制war包到webapps目录 end
}


## 启动tomcat
function startTomcat(){
	echo ---------------------------启动Tomcat beginning
	$TOMCA_START
	echo ---------------------------启动Tomcat end
} 


## 删除之前上传的临时war包
function removeTempUploadWarPkg(){
	echo ---------------------------删除之前上传的临时war包 beginning
	rm -rf $TOMCAT_HOME/$TEMP_UPLOAD_WAR_NAME/$PROJECT_NAME.war
	echo ---------------------------删除之前上传的临时war包 end
}

## 删除1天前上传的备份的war包
function removeBackUpFiles(){		
	echo ---------------------------删除1天前上传的备份的war包 beginning
	find $TOMCAT_HOME/$BACKUP_RUNNING_WAR_FOLDER_NAME -mtime +0 -name &quot;$PROJECT_NAME*.zip&quot; -exec rm -rf {} \;
	echo ---------------------------删除1天前上传的备份的war包 end	
}

#创建备份文件夹（若没有则创建）
createBackFolder
#备份运行中的代码
backUpRunningCode
#关闭所有运行的Tomcat
killRunningTomcat
#删除服务器中的war+folder
removeOldWarFolder
#拷贝上传后的war到webapps
copyUploadWar2Webapps
#启动Tomcat
startTomcat
#删除上传的临时war包
removeTempUploadWarPkg
#删除1天前上传的备份的war包
removeBackUpFiles
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[域名映射博客]]></title>
        <id>http://FreshStudent.github.io/post/域名</id>
        <link href="http://FreshStudent.github.io/post/域名">
        </link>
        <updated>2018-05-03T06:20:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="域名映射关键步骤">域名映射关键步骤</h1>
<h2 id="quick-start">Quick Start</h2>
<h3 id="登录阿里云">登录阿里云</h3>
<p><a href="https://wanwang.aliyun.com/?spm=5176.8142029.388261.277.a7236d3eP22Jis">相关Url:</a><br>
<img src="http://FreshStudent.github.io/post-images/aliyunSearch.png" alt="打开阿里云域名"></p>
<h3 id="搜索域名">搜索域名</h3>
<p><img src="http://FreshStudent.github.io/post-images/aliyunSearchYouWant.png" alt="搜索你想要的域名"></p>
<h3 id="购买域名">购买域名</h3>
<p><img src="http://FreshStudent.github.io/post-images/aliyunBuy.png" alt="购买选中的域名"></p>
<h3 id="查找博客对应的ip用于映射">查找博客对应的IP，用于映射</h3>
<p><img src="http://FreshStudent.github.io/post-images/findGitHubIOIpAddress.png" alt="查找gitHubIO中对应的IP地址"></p>
<h3 id="域名解析">域名解析</h3>
<p><img src="http://FreshStudent.github.io/post-images/aliyunSiteToYourWebStep1.png" alt="将域名与GitHub捆绑起来">
<img src="http://FreshStudent.github.io/post-images/aliyunSiteToYourWebStep2.png" alt="将域名与GitHub捆绑起来"></p>
<h3 id="github的io项目中捆绑域名">gitHub的IO项目中捆绑域名</h3>
<p><img src="http://FreshStudent.github.io/post-images/aliyunGitHubSetSiteStep1.png" alt="将域名与GitHub捆绑起来">
<img src="http://FreshStudent.github.io/post-images/aliyunGitHubSetSiteStep2.png" alt="将域名与GitHub捆绑起来">
在本地Hexo文件夹source中创建CNAME（Linux 命令： touch CNAME）文件，注意该文件名没有后缀，内容是刚申请的域名。</p>
<pre><code>Linux code ：touch CNAME
</code></pre>
<p><strong>ps：如果没有在本地source文件夹中创建CNAME文件，则每次提交（hexo g -d）后，域名映射会失效。</strong><br>
<img src="http://FreshStudent.github.io/post-images/creatLocalCNAMEFile.png" alt="将域名与GitHub捆绑起来"></p>
<blockquote>
<p>Done！</p>
</blockquote>
]]></content>
    </entry>
</feed>